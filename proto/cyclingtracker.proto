syntax = "proto3";

package cyclingtracker;

// Service for providing session tokens
service SessionAuth {
  // Return a session token on successful login.
  rpc Login(Credentials) returns (SessionToken) {}
}

message Credentials {
  // Username
  string username = 1;
  // Password
  string password = 2;
}

message SessionToken {
  // Session token as a string.
  string token = 1;
}

// Service for tracking cycling activities
service CyclingTracker {
  // Save a workout and return an workout summary.
  //
  // Summary includes measurement averages.
  rpc SaveWorkout(Workout) returns (WorkoutSummary) {}

  // Return detailed measurements of a certain workout. Measurements are streamed
  // rather than returned at once, since there might be a lot of measurements.
  rpc GetMeasurements(WorkoutRequest) returns (stream Measurement) {}

  // Records an ongoing workout and its measurements and returns a workout summary
  // at the end of the workout.
  rpc RecordWorkout(stream Measurement) returns (WorkoutSummary) {}

  rpc CreateWorkoutPlan(WorkoutPlan) returns (WorkoutPlanToken) {}

  // Runs a workout plan by adjusting the trainers resistance
  rpc RunWorkout(stream WorkoutStep) returns (stream ControlStep) {}
}

message Workout {
  float km_ridden = 1;
  repeated Measurement measurements = 2;
}

message Measurement {
  float speed = 1;
  int32 watts = 2;
  int32 rpm = 3;
  int32 resistance = 4;
  int32 heartrate = 5;
}

message WorkoutSummary {
  int32 id = 1;
  float km_ridden = 2;
  float avg_speed = 3;
  int32 avg_watts = 4;
  int32 avg_rpm = 5;
  int32 avg_heartrate = 6;
  repeated Measurement measurements = 7;
}

message WorkoutRequest {
  int32 id = 1;
}

message WorkoutPlan {
  message Step {
    int32 watts = 1;
    int32 duration = 2;
  }
  repeated Step steps = 1;
}

message WorkoutPlanToken {
  int32 workout_token = 1;
}

enum StepType {
  STARTING = 0;
  IN_PROGRESS = 1;
  ENDING = 2;
}

message WorkoutStep {
  StepType stype = 1;
  optional WorkoutPlanToken workout_token = 2;
  optional Measurement measurement = 3;
}

message ControlStep {
  StepType stype = 1;
  optional int32 resistance = 2;
  optional int32 workout_summary_id = 3;
}